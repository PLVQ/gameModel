// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityOpenConfig.proto

#include "ActivityOpenConfig.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace resource {
constexpr ActivityOpenConfig::ActivityOpenConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : openparam_()
  , _openparam_cached_byte_size_(0)
  , activityname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , activityid_(0)
  , activitytype_(0)
  , activitytypeparam_(0)
  , activityuitype_(0)
  , openlevel_(0)
  , createroledays_(0)
  , sortid_(0)
  , opentype_(0)
  , statisticsopentime_(0u)
  , opensvrtimelimit_(0u)
  , delaytime_(0u)
  , isneedselectsubid_(0)
  , actopenlatersvropenlimit_(0)
  , isneedselectsvrid_(0){}
struct ActivityOpenConfigDefaultTypeInternal {
  constexpr ActivityOpenConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivityOpenConfigDefaultTypeInternal() {}
  union {
    ActivityOpenConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivityOpenConfigDefaultTypeInternal _ActivityOpenConfig_default_instance_;
constexpr ActivityOpenConfigList::ActivityOpenConfigList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(){}
struct ActivityOpenConfigListDefaultTypeInternal {
  constexpr ActivityOpenConfigListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivityOpenConfigListDefaultTypeInternal() {}
  union {
    ActivityOpenConfigList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivityOpenConfigListDefaultTypeInternal _ActivityOpenConfigList_default_instance_;
}  // namespace resource
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ActivityOpenConfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ActivityOpenConfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ActivityOpenConfig_2eproto = nullptr;

const uint32_t TableStruct_ActivityOpenConfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, activityid_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, activityname_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, activitytype_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, activitytypeparam_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, activityuitype_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, openlevel_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, createroledays_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, sortid_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, opentype_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, openparam_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, statisticsopentime_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, opensvrtimelimit_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, delaytime_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, isneedselectsubid_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, actopenlatersvropenlimit_),
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfig, isneedselectsvrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfigList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::resource::ActivityOpenConfigList, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::resource::ActivityOpenConfig)},
  { 22, -1, -1, sizeof(::resource::ActivityOpenConfigList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resource::_ActivityOpenConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resource::_ActivityOpenConfigList_default_instance_),
};

const char descriptor_table_protodef_ActivityOpenConfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030ActivityOpenConfig.proto\022\010resource\"\210\003\n"
  "\022ActivityOpenConfig\022\022\n\nActivityID\030\001 \001(\005\022"
  "\024\n\014ActivityName\030\002 \001(\t\022\024\n\014ActivityType\030\003 "
  "\001(\005\022\031\n\021ActivityTypeParam\030\004 \001(\005\022\026\n\016Activi"
  "tyUIType\030\005 \001(\005\022\021\n\tOpenLevel\030\006 \001(\005\022\026\n\016Cre"
  "ateRoleDays\030\007 \001(\005\022\016\n\006SortID\030\010 \001(\005\022\020\n\010Ope"
  "nType\030\t \001(\005\022\021\n\tOpenParam\030\n \003(\003\022\032\n\022Statis"
  "ticsOpenTime\030\013 \001(\r\022\030\n\020OpenSvrTimeLimit\030\014"
  " \001(\r\022\021\n\tDelayTime\030\r \001(\r\022\031\n\021IsNeedSelectS"
  "ubID\030\016 \001(\005\022 \n\030ActOpenLaterSvrOpenLimit\030\017"
  " \001(\005\022\031\n\021IsNeedSelectSvrID\030\020 \001(\005\"D\n\026Activ"
  "ityOpenConfigList\022*\n\004data\030\001 \003(\0132\034.resour"
  "ce.ActivityOpenConfigB\025Z\023./resource;reso"
  "urceb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ActivityOpenConfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ActivityOpenConfig_2eproto = {
  false, false, 532, descriptor_table_protodef_ActivityOpenConfig_2eproto, "ActivityOpenConfig.proto", 
  &descriptor_table_ActivityOpenConfig_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_ActivityOpenConfig_2eproto::offsets,
  file_level_metadata_ActivityOpenConfig_2eproto, file_level_enum_descriptors_ActivityOpenConfig_2eproto, file_level_service_descriptors_ActivityOpenConfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ActivityOpenConfig_2eproto_getter() {
  return &descriptor_table_ActivityOpenConfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ActivityOpenConfig_2eproto(&descriptor_table_ActivityOpenConfig_2eproto);
namespace resource {

// ===================================================================

class ActivityOpenConfig::_Internal {
 public:
};

ActivityOpenConfig::ActivityOpenConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  openparam_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:resource.ActivityOpenConfig)
}
ActivityOpenConfig::ActivityOpenConfig(const ActivityOpenConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      openparam_(from.openparam_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  activityname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    activityname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_activityname().empty()) {
    activityname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_activityname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&activityid_, &from.activityid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isneedselectsvrid_) -
    reinterpret_cast<char*>(&activityid_)) + sizeof(isneedselectsvrid_));
  // @@protoc_insertion_point(copy_constructor:resource.ActivityOpenConfig)
}

inline void ActivityOpenConfig::SharedCtor() {
activityname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  activityname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&activityid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isneedselectsvrid_) -
    reinterpret_cast<char*>(&activityid_)) + sizeof(isneedselectsvrid_));
}

ActivityOpenConfig::~ActivityOpenConfig() {
  // @@protoc_insertion_point(destructor:resource.ActivityOpenConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActivityOpenConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  activityname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityOpenConfig::ArenaDtor(void* object) {
  ActivityOpenConfig* _this = reinterpret_cast< ActivityOpenConfig* >(object);
  (void)_this;
}
void ActivityOpenConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivityOpenConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActivityOpenConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:resource.ActivityOpenConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openparam_.Clear();
  activityname_.ClearToEmpty();
  ::memset(&activityid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isneedselectsvrid_) -
      reinterpret_cast<char*>(&activityid_)) + sizeof(isneedselectsvrid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityOpenConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ActivityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          activityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ActivityName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_activityname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "resource.ActivityOpenConfig.ActivityName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActivityType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          activitytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActivityTypeParam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          activitytypeparam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActivityUIType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          activityuitype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 OpenLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          openlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CreateRoleDays = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          createroledays_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SortID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          sortid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 OpenType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          opentype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 OpenParam = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_openparam(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_openparam(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 StatisticsOpenTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          statisticsopentime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 OpenSvrTimeLimit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          opensvrtimelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 DelayTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          delaytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 IsNeedSelectSubID = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          isneedselectsubid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActOpenLaterSvrOpenLimit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          actopenlatersvropenlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 IsNeedSelectSvrID = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          isneedselectsvrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityOpenConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resource.ActivityOpenConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ActivityID = 1;
  if (this->_internal_activityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_activityid(), target);
  }

  // string ActivityName = 2;
  if (!this->_internal_activityname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_activityname().data(), static_cast<int>(this->_internal_activityname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "resource.ActivityOpenConfig.ActivityName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_activityname(), target);
  }

  // int32 ActivityType = 3;
  if (this->_internal_activitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_activitytype(), target);
  }

  // int32 ActivityTypeParam = 4;
  if (this->_internal_activitytypeparam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_activitytypeparam(), target);
  }

  // int32 ActivityUIType = 5;
  if (this->_internal_activityuitype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_activityuitype(), target);
  }

  // int32 OpenLevel = 6;
  if (this->_internal_openlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_openlevel(), target);
  }

  // int32 CreateRoleDays = 7;
  if (this->_internal_createroledays() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_createroledays(), target);
  }

  // int32 SortID = 8;
  if (this->_internal_sortid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_sortid(), target);
  }

  // int32 OpenType = 9;
  if (this->_internal_opentype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_opentype(), target);
  }

  // repeated int64 OpenParam = 10;
  {
    int byte_size = _openparam_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          10, _internal_openparam(), byte_size, target);
    }
  }

  // uint32 StatisticsOpenTime = 11;
  if (this->_internal_statisticsopentime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_statisticsopentime(), target);
  }

  // uint32 OpenSvrTimeLimit = 12;
  if (this->_internal_opensvrtimelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_opensvrtimelimit(), target);
  }

  // uint32 DelayTime = 13;
  if (this->_internal_delaytime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_delaytime(), target);
  }

  // int32 IsNeedSelectSubID = 14;
  if (this->_internal_isneedselectsubid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_isneedselectsubid(), target);
  }

  // int32 ActOpenLaterSvrOpenLimit = 15;
  if (this->_internal_actopenlatersvropenlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_actopenlatersvropenlimit(), target);
  }

  // int32 IsNeedSelectSvrID = 16;
  if (this->_internal_isneedselectsvrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_isneedselectsvrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resource.ActivityOpenConfig)
  return target;
}

size_t ActivityOpenConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resource.ActivityOpenConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 OpenParam = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->openparam_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _openparam_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string ActivityName = 2;
  if (!this->_internal_activityname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activityname());
  }

  // int32 ActivityID = 1;
  if (this->_internal_activityid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_activityid());
  }

  // int32 ActivityType = 3;
  if (this->_internal_activitytype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_activitytype());
  }

  // int32 ActivityTypeParam = 4;
  if (this->_internal_activitytypeparam() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_activitytypeparam());
  }

  // int32 ActivityUIType = 5;
  if (this->_internal_activityuitype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_activityuitype());
  }

  // int32 OpenLevel = 6;
  if (this->_internal_openlevel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_openlevel());
  }

  // int32 CreateRoleDays = 7;
  if (this->_internal_createroledays() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_createroledays());
  }

  // int32 SortID = 8;
  if (this->_internal_sortid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sortid());
  }

  // int32 OpenType = 9;
  if (this->_internal_opentype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_opentype());
  }

  // uint32 StatisticsOpenTime = 11;
  if (this->_internal_statisticsopentime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_statisticsopentime());
  }

  // uint32 OpenSvrTimeLimit = 12;
  if (this->_internal_opensvrtimelimit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_opensvrtimelimit());
  }

  // uint32 DelayTime = 13;
  if (this->_internal_delaytime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_delaytime());
  }

  // int32 IsNeedSelectSubID = 14;
  if (this->_internal_isneedselectsubid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_isneedselectsubid());
  }

  // int32 ActOpenLaterSvrOpenLimit = 15;
  if (this->_internal_actopenlatersvropenlimit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_actopenlatersvropenlimit());
  }

  // int32 IsNeedSelectSvrID = 16;
  if (this->_internal_isneedselectsvrid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isneedselectsvrid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityOpenConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActivityOpenConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityOpenConfig::GetClassData() const { return &_class_data_; }

void ActivityOpenConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActivityOpenConfig *>(to)->MergeFrom(
      static_cast<const ActivityOpenConfig &>(from));
}


void ActivityOpenConfig::MergeFrom(const ActivityOpenConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resource.ActivityOpenConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  openparam_.MergeFrom(from.openparam_);
  if (!from._internal_activityname().empty()) {
    _internal_set_activityname(from._internal_activityname());
  }
  if (from._internal_activityid() != 0) {
    _internal_set_activityid(from._internal_activityid());
  }
  if (from._internal_activitytype() != 0) {
    _internal_set_activitytype(from._internal_activitytype());
  }
  if (from._internal_activitytypeparam() != 0) {
    _internal_set_activitytypeparam(from._internal_activitytypeparam());
  }
  if (from._internal_activityuitype() != 0) {
    _internal_set_activityuitype(from._internal_activityuitype());
  }
  if (from._internal_openlevel() != 0) {
    _internal_set_openlevel(from._internal_openlevel());
  }
  if (from._internal_createroledays() != 0) {
    _internal_set_createroledays(from._internal_createroledays());
  }
  if (from._internal_sortid() != 0) {
    _internal_set_sortid(from._internal_sortid());
  }
  if (from._internal_opentype() != 0) {
    _internal_set_opentype(from._internal_opentype());
  }
  if (from._internal_statisticsopentime() != 0) {
    _internal_set_statisticsopentime(from._internal_statisticsopentime());
  }
  if (from._internal_opensvrtimelimit() != 0) {
    _internal_set_opensvrtimelimit(from._internal_opensvrtimelimit());
  }
  if (from._internal_delaytime() != 0) {
    _internal_set_delaytime(from._internal_delaytime());
  }
  if (from._internal_isneedselectsubid() != 0) {
    _internal_set_isneedselectsubid(from._internal_isneedselectsubid());
  }
  if (from._internal_actopenlatersvropenlimit() != 0) {
    _internal_set_actopenlatersvropenlimit(from._internal_actopenlatersvropenlimit());
  }
  if (from._internal_isneedselectsvrid() != 0) {
    _internal_set_isneedselectsvrid(from._internal_isneedselectsvrid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityOpenConfig::CopyFrom(const ActivityOpenConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resource.ActivityOpenConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityOpenConfig::IsInitialized() const {
  return true;
}

void ActivityOpenConfig::InternalSwap(ActivityOpenConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  openparam_.InternalSwap(&other->openparam_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &activityname_, lhs_arena,
      &other->activityname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityOpenConfig, isneedselectsvrid_)
      + sizeof(ActivityOpenConfig::isneedselectsvrid_)
      - PROTOBUF_FIELD_OFFSET(ActivityOpenConfig, activityid_)>(
          reinterpret_cast<char*>(&activityid_),
          reinterpret_cast<char*>(&other->activityid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityOpenConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ActivityOpenConfig_2eproto_getter, &descriptor_table_ActivityOpenConfig_2eproto_once,
      file_level_metadata_ActivityOpenConfig_2eproto[0]);
}

// ===================================================================

class ActivityOpenConfigList::_Internal {
 public:
};

ActivityOpenConfigList::ActivityOpenConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:resource.ActivityOpenConfigList)
}
ActivityOpenConfigList::ActivityOpenConfigList(const ActivityOpenConfigList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:resource.ActivityOpenConfigList)
}

inline void ActivityOpenConfigList::SharedCtor() {
}

ActivityOpenConfigList::~ActivityOpenConfigList() {
  // @@protoc_insertion_point(destructor:resource.ActivityOpenConfigList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActivityOpenConfigList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActivityOpenConfigList::ArenaDtor(void* object) {
  ActivityOpenConfigList* _this = reinterpret_cast< ActivityOpenConfigList* >(object);
  (void)_this;
}
void ActivityOpenConfigList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivityOpenConfigList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActivityOpenConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:resource.ActivityOpenConfigList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityOpenConfigList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .resource.ActivityOpenConfig data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityOpenConfigList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resource.ActivityOpenConfigList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .resource.ActivityOpenConfig data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resource.ActivityOpenConfigList)
  return target;
}

size_t ActivityOpenConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resource.ActivityOpenConfigList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .resource.ActivityOpenConfig data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityOpenConfigList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActivityOpenConfigList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityOpenConfigList::GetClassData() const { return &_class_data_; }

void ActivityOpenConfigList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActivityOpenConfigList *>(to)->MergeFrom(
      static_cast<const ActivityOpenConfigList &>(from));
}


void ActivityOpenConfigList::MergeFrom(const ActivityOpenConfigList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resource.ActivityOpenConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityOpenConfigList::CopyFrom(const ActivityOpenConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resource.ActivityOpenConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityOpenConfigList::IsInitialized() const {
  return true;
}

void ActivityOpenConfigList::InternalSwap(ActivityOpenConfigList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityOpenConfigList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ActivityOpenConfig_2eproto_getter, &descriptor_table_ActivityOpenConfig_2eproto_once,
      file_level_metadata_ActivityOpenConfig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace resource
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::resource::ActivityOpenConfig* Arena::CreateMaybeMessage< ::resource::ActivityOpenConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resource::ActivityOpenConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::resource::ActivityOpenConfigList* Arena::CreateMaybeMessage< ::resource::ActivityOpenConfigList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resource::ActivityOpenConfigList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

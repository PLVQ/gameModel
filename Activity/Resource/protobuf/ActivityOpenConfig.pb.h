// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityOpenConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ActivityOpenConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ActivityOpenConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ActivityOpenConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ActivityOpenConfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ActivityOpenConfig_2eproto;
namespace resource {
class ActivityOpenConfig;
struct ActivityOpenConfigDefaultTypeInternal;
extern ActivityOpenConfigDefaultTypeInternal _ActivityOpenConfig_default_instance_;
class ActivityOpenConfigList;
struct ActivityOpenConfigListDefaultTypeInternal;
extern ActivityOpenConfigListDefaultTypeInternal _ActivityOpenConfigList_default_instance_;
}  // namespace resource
PROTOBUF_NAMESPACE_OPEN
template<> ::resource::ActivityOpenConfig* Arena::CreateMaybeMessage<::resource::ActivityOpenConfig>(Arena*);
template<> ::resource::ActivityOpenConfigList* Arena::CreateMaybeMessage<::resource::ActivityOpenConfigList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace resource {

// ===================================================================

class ActivityOpenConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.ActivityOpenConfig) */ {
 public:
  inline ActivityOpenConfig() : ActivityOpenConfig(nullptr) {}
  ~ActivityOpenConfig() override;
  explicit constexpr ActivityOpenConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivityOpenConfig(const ActivityOpenConfig& from);
  ActivityOpenConfig(ActivityOpenConfig&& from) noexcept
    : ActivityOpenConfig() {
    *this = ::std::move(from);
  }

  inline ActivityOpenConfig& operator=(const ActivityOpenConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityOpenConfig& operator=(ActivityOpenConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivityOpenConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivityOpenConfig* internal_default_instance() {
    return reinterpret_cast<const ActivityOpenConfig*>(
               &_ActivityOpenConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActivityOpenConfig& a, ActivityOpenConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityOpenConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityOpenConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivityOpenConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivityOpenConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivityOpenConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActivityOpenConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityOpenConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.ActivityOpenConfig";
  }
  protected:
  explicit ActivityOpenConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenParamFieldNumber = 10,
    kActivityNameFieldNumber = 2,
    kActivityIDFieldNumber = 1,
    kActivityTypeFieldNumber = 3,
    kActivityTypeParamFieldNumber = 4,
    kActivityUITypeFieldNumber = 5,
    kOpenLevelFieldNumber = 6,
    kCreateRoleDaysFieldNumber = 7,
    kSortIDFieldNumber = 8,
    kOpenTypeFieldNumber = 9,
    kStatisticsOpenTimeFieldNumber = 11,
    kOpenSvrTimeLimitFieldNumber = 12,
    kDelayTimeFieldNumber = 13,
    kIsNeedSelectSubIDFieldNumber = 14,
    kActOpenLaterSvrOpenLimitFieldNumber = 15,
    kIsNeedSelectSvrIDFieldNumber = 16,
  };
  // repeated int64 OpenParam = 10;
  int openparam_size() const;
  private:
  int _internal_openparam_size() const;
  public:
  void clear_openparam();
  private:
  int64_t _internal_openparam(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_openparam() const;
  void _internal_add_openparam(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_openparam();
  public:
  int64_t openparam(int index) const;
  void set_openparam(int index, int64_t value);
  void add_openparam(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      openparam() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_openparam();

  // string ActivityName = 2;
  void clear_activityname();
  const std::string& activityname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_activityname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_activityname();
  PROTOBUF_NODISCARD std::string* release_activityname();
  void set_allocated_activityname(std::string* activityname);
  private:
  const std::string& _internal_activityname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_activityname(const std::string& value);
  std::string* _internal_mutable_activityname();
  public:

  // int32 ActivityID = 1;
  void clear_activityid();
  int32_t activityid() const;
  void set_activityid(int32_t value);
  private:
  int32_t _internal_activityid() const;
  void _internal_set_activityid(int32_t value);
  public:

  // int32 ActivityType = 3;
  void clear_activitytype();
  int32_t activitytype() const;
  void set_activitytype(int32_t value);
  private:
  int32_t _internal_activitytype() const;
  void _internal_set_activitytype(int32_t value);
  public:

  // int32 ActivityTypeParam = 4;
  void clear_activitytypeparam();
  int32_t activitytypeparam() const;
  void set_activitytypeparam(int32_t value);
  private:
  int32_t _internal_activitytypeparam() const;
  void _internal_set_activitytypeparam(int32_t value);
  public:

  // int32 ActivityUIType = 5;
  void clear_activityuitype();
  int32_t activityuitype() const;
  void set_activityuitype(int32_t value);
  private:
  int32_t _internal_activityuitype() const;
  void _internal_set_activityuitype(int32_t value);
  public:

  // int32 OpenLevel = 6;
  void clear_openlevel();
  int32_t openlevel() const;
  void set_openlevel(int32_t value);
  private:
  int32_t _internal_openlevel() const;
  void _internal_set_openlevel(int32_t value);
  public:

  // int32 CreateRoleDays = 7;
  void clear_createroledays();
  int32_t createroledays() const;
  void set_createroledays(int32_t value);
  private:
  int32_t _internal_createroledays() const;
  void _internal_set_createroledays(int32_t value);
  public:

  // int32 SortID = 8;
  void clear_sortid();
  int32_t sortid() const;
  void set_sortid(int32_t value);
  private:
  int32_t _internal_sortid() const;
  void _internal_set_sortid(int32_t value);
  public:

  // int32 OpenType = 9;
  void clear_opentype();
  int32_t opentype() const;
  void set_opentype(int32_t value);
  private:
  int32_t _internal_opentype() const;
  void _internal_set_opentype(int32_t value);
  public:

  // uint32 StatisticsOpenTime = 11;
  void clear_statisticsopentime();
  uint32_t statisticsopentime() const;
  void set_statisticsopentime(uint32_t value);
  private:
  uint32_t _internal_statisticsopentime() const;
  void _internal_set_statisticsopentime(uint32_t value);
  public:

  // uint32 OpenSvrTimeLimit = 12;
  void clear_opensvrtimelimit();
  uint32_t opensvrtimelimit() const;
  void set_opensvrtimelimit(uint32_t value);
  private:
  uint32_t _internal_opensvrtimelimit() const;
  void _internal_set_opensvrtimelimit(uint32_t value);
  public:

  // uint32 DelayTime = 13;
  void clear_delaytime();
  uint32_t delaytime() const;
  void set_delaytime(uint32_t value);
  private:
  uint32_t _internal_delaytime() const;
  void _internal_set_delaytime(uint32_t value);
  public:

  // int32 IsNeedSelectSubID = 14;
  void clear_isneedselectsubid();
  int32_t isneedselectsubid() const;
  void set_isneedselectsubid(int32_t value);
  private:
  int32_t _internal_isneedselectsubid() const;
  void _internal_set_isneedselectsubid(int32_t value);
  public:

  // int32 ActOpenLaterSvrOpenLimit = 15;
  void clear_actopenlatersvropenlimit();
  int32_t actopenlatersvropenlimit() const;
  void set_actopenlatersvropenlimit(int32_t value);
  private:
  int32_t _internal_actopenlatersvropenlimit() const;
  void _internal_set_actopenlatersvropenlimit(int32_t value);
  public:

  // int32 IsNeedSelectSvrID = 16;
  void clear_isneedselectsvrid();
  int32_t isneedselectsvrid() const;
  void set_isneedselectsvrid(int32_t value);
  private:
  int32_t _internal_isneedselectsvrid() const;
  void _internal_set_isneedselectsvrid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:resource.ActivityOpenConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > openparam_;
  mutable std::atomic<int> _openparam_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activityname_;
  int32_t activityid_;
  int32_t activitytype_;
  int32_t activitytypeparam_;
  int32_t activityuitype_;
  int32_t openlevel_;
  int32_t createroledays_;
  int32_t sortid_;
  int32_t opentype_;
  uint32_t statisticsopentime_;
  uint32_t opensvrtimelimit_;
  uint32_t delaytime_;
  int32_t isneedselectsubid_;
  int32_t actopenlatersvropenlimit_;
  int32_t isneedselectsvrid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActivityOpenConfig_2eproto;
};
// -------------------------------------------------------------------

class ActivityOpenConfigList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.ActivityOpenConfigList) */ {
 public:
  inline ActivityOpenConfigList() : ActivityOpenConfigList(nullptr) {}
  ~ActivityOpenConfigList() override;
  explicit constexpr ActivityOpenConfigList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivityOpenConfigList(const ActivityOpenConfigList& from);
  ActivityOpenConfigList(ActivityOpenConfigList&& from) noexcept
    : ActivityOpenConfigList() {
    *this = ::std::move(from);
  }

  inline ActivityOpenConfigList& operator=(const ActivityOpenConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityOpenConfigList& operator=(ActivityOpenConfigList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivityOpenConfigList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivityOpenConfigList* internal_default_instance() {
    return reinterpret_cast<const ActivityOpenConfigList*>(
               &_ActivityOpenConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActivityOpenConfigList& a, ActivityOpenConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityOpenConfigList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityOpenConfigList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivityOpenConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivityOpenConfigList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivityOpenConfigList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActivityOpenConfigList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityOpenConfigList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.ActivityOpenConfigList";
  }
  protected:
  explicit ActivityOpenConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .resource.ActivityOpenConfig data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::resource::ActivityOpenConfig* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ActivityOpenConfig >*
      mutable_data();
  private:
  const ::resource::ActivityOpenConfig& _internal_data(int index) const;
  ::resource::ActivityOpenConfig* _internal_add_data();
  public:
  const ::resource::ActivityOpenConfig& data(int index) const;
  ::resource::ActivityOpenConfig* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ActivityOpenConfig >&
      data() const;

  // @@protoc_insertion_point(class_scope:resource.ActivityOpenConfigList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ActivityOpenConfig > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ActivityOpenConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActivityOpenConfig

// int32 ActivityID = 1;
inline void ActivityOpenConfig::clear_activityid() {
  activityid_ = 0;
}
inline int32_t ActivityOpenConfig::_internal_activityid() const {
  return activityid_;
}
inline int32_t ActivityOpenConfig::activityid() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.ActivityID)
  return _internal_activityid();
}
inline void ActivityOpenConfig::_internal_set_activityid(int32_t value) {
  
  activityid_ = value;
}
inline void ActivityOpenConfig::set_activityid(int32_t value) {
  _internal_set_activityid(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.ActivityID)
}

// string ActivityName = 2;
inline void ActivityOpenConfig::clear_activityname() {
  activityname_.ClearToEmpty();
}
inline const std::string& ActivityOpenConfig::activityname() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.ActivityName)
  return _internal_activityname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityOpenConfig::set_activityname(ArgT0&& arg0, ArgT... args) {
 
 activityname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.ActivityName)
}
inline std::string* ActivityOpenConfig::mutable_activityname() {
  std::string* _s = _internal_mutable_activityname();
  // @@protoc_insertion_point(field_mutable:resource.ActivityOpenConfig.ActivityName)
  return _s;
}
inline const std::string& ActivityOpenConfig::_internal_activityname() const {
  return activityname_.Get();
}
inline void ActivityOpenConfig::_internal_set_activityname(const std::string& value) {
  
  activityname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActivityOpenConfig::_internal_mutable_activityname() {
  
  return activityname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActivityOpenConfig::release_activityname() {
  // @@protoc_insertion_point(field_release:resource.ActivityOpenConfig.ActivityName)
  return activityname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ActivityOpenConfig::set_allocated_activityname(std::string* activityname) {
  if (activityname != nullptr) {
    
  } else {
    
  }
  activityname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activityname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (activityname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    activityname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:resource.ActivityOpenConfig.ActivityName)
}

// int32 ActivityType = 3;
inline void ActivityOpenConfig::clear_activitytype() {
  activitytype_ = 0;
}
inline int32_t ActivityOpenConfig::_internal_activitytype() const {
  return activitytype_;
}
inline int32_t ActivityOpenConfig::activitytype() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.ActivityType)
  return _internal_activitytype();
}
inline void ActivityOpenConfig::_internal_set_activitytype(int32_t value) {
  
  activitytype_ = value;
}
inline void ActivityOpenConfig::set_activitytype(int32_t value) {
  _internal_set_activitytype(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.ActivityType)
}

// int32 ActivityTypeParam = 4;
inline void ActivityOpenConfig::clear_activitytypeparam() {
  activitytypeparam_ = 0;
}
inline int32_t ActivityOpenConfig::_internal_activitytypeparam() const {
  return activitytypeparam_;
}
inline int32_t ActivityOpenConfig::activitytypeparam() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.ActivityTypeParam)
  return _internal_activitytypeparam();
}
inline void ActivityOpenConfig::_internal_set_activitytypeparam(int32_t value) {
  
  activitytypeparam_ = value;
}
inline void ActivityOpenConfig::set_activitytypeparam(int32_t value) {
  _internal_set_activitytypeparam(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.ActivityTypeParam)
}

// int32 ActivityUIType = 5;
inline void ActivityOpenConfig::clear_activityuitype() {
  activityuitype_ = 0;
}
inline int32_t ActivityOpenConfig::_internal_activityuitype() const {
  return activityuitype_;
}
inline int32_t ActivityOpenConfig::activityuitype() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.ActivityUIType)
  return _internal_activityuitype();
}
inline void ActivityOpenConfig::_internal_set_activityuitype(int32_t value) {
  
  activityuitype_ = value;
}
inline void ActivityOpenConfig::set_activityuitype(int32_t value) {
  _internal_set_activityuitype(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.ActivityUIType)
}

// int32 OpenLevel = 6;
inline void ActivityOpenConfig::clear_openlevel() {
  openlevel_ = 0;
}
inline int32_t ActivityOpenConfig::_internal_openlevel() const {
  return openlevel_;
}
inline int32_t ActivityOpenConfig::openlevel() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.OpenLevel)
  return _internal_openlevel();
}
inline void ActivityOpenConfig::_internal_set_openlevel(int32_t value) {
  
  openlevel_ = value;
}
inline void ActivityOpenConfig::set_openlevel(int32_t value) {
  _internal_set_openlevel(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.OpenLevel)
}

// int32 CreateRoleDays = 7;
inline void ActivityOpenConfig::clear_createroledays() {
  createroledays_ = 0;
}
inline int32_t ActivityOpenConfig::_internal_createroledays() const {
  return createroledays_;
}
inline int32_t ActivityOpenConfig::createroledays() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.CreateRoleDays)
  return _internal_createroledays();
}
inline void ActivityOpenConfig::_internal_set_createroledays(int32_t value) {
  
  createroledays_ = value;
}
inline void ActivityOpenConfig::set_createroledays(int32_t value) {
  _internal_set_createroledays(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.CreateRoleDays)
}

// int32 SortID = 8;
inline void ActivityOpenConfig::clear_sortid() {
  sortid_ = 0;
}
inline int32_t ActivityOpenConfig::_internal_sortid() const {
  return sortid_;
}
inline int32_t ActivityOpenConfig::sortid() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.SortID)
  return _internal_sortid();
}
inline void ActivityOpenConfig::_internal_set_sortid(int32_t value) {
  
  sortid_ = value;
}
inline void ActivityOpenConfig::set_sortid(int32_t value) {
  _internal_set_sortid(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.SortID)
}

// int32 OpenType = 9;
inline void ActivityOpenConfig::clear_opentype() {
  opentype_ = 0;
}
inline int32_t ActivityOpenConfig::_internal_opentype() const {
  return opentype_;
}
inline int32_t ActivityOpenConfig::opentype() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.OpenType)
  return _internal_opentype();
}
inline void ActivityOpenConfig::_internal_set_opentype(int32_t value) {
  
  opentype_ = value;
}
inline void ActivityOpenConfig::set_opentype(int32_t value) {
  _internal_set_opentype(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.OpenType)
}

// repeated int64 OpenParam = 10;
inline int ActivityOpenConfig::_internal_openparam_size() const {
  return openparam_.size();
}
inline int ActivityOpenConfig::openparam_size() const {
  return _internal_openparam_size();
}
inline void ActivityOpenConfig::clear_openparam() {
  openparam_.Clear();
}
inline int64_t ActivityOpenConfig::_internal_openparam(int index) const {
  return openparam_.Get(index);
}
inline int64_t ActivityOpenConfig::openparam(int index) const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.OpenParam)
  return _internal_openparam(index);
}
inline void ActivityOpenConfig::set_openparam(int index, int64_t value) {
  openparam_.Set(index, value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.OpenParam)
}
inline void ActivityOpenConfig::_internal_add_openparam(int64_t value) {
  openparam_.Add(value);
}
inline void ActivityOpenConfig::add_openparam(int64_t value) {
  _internal_add_openparam(value);
  // @@protoc_insertion_point(field_add:resource.ActivityOpenConfig.OpenParam)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ActivityOpenConfig::_internal_openparam() const {
  return openparam_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ActivityOpenConfig::openparam() const {
  // @@protoc_insertion_point(field_list:resource.ActivityOpenConfig.OpenParam)
  return _internal_openparam();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ActivityOpenConfig::_internal_mutable_openparam() {
  return &openparam_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ActivityOpenConfig::mutable_openparam() {
  // @@protoc_insertion_point(field_mutable_list:resource.ActivityOpenConfig.OpenParam)
  return _internal_mutable_openparam();
}

// uint32 StatisticsOpenTime = 11;
inline void ActivityOpenConfig::clear_statisticsopentime() {
  statisticsopentime_ = 0u;
}
inline uint32_t ActivityOpenConfig::_internal_statisticsopentime() const {
  return statisticsopentime_;
}
inline uint32_t ActivityOpenConfig::statisticsopentime() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.StatisticsOpenTime)
  return _internal_statisticsopentime();
}
inline void ActivityOpenConfig::_internal_set_statisticsopentime(uint32_t value) {
  
  statisticsopentime_ = value;
}
inline void ActivityOpenConfig::set_statisticsopentime(uint32_t value) {
  _internal_set_statisticsopentime(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.StatisticsOpenTime)
}

// uint32 OpenSvrTimeLimit = 12;
inline void ActivityOpenConfig::clear_opensvrtimelimit() {
  opensvrtimelimit_ = 0u;
}
inline uint32_t ActivityOpenConfig::_internal_opensvrtimelimit() const {
  return opensvrtimelimit_;
}
inline uint32_t ActivityOpenConfig::opensvrtimelimit() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.OpenSvrTimeLimit)
  return _internal_opensvrtimelimit();
}
inline void ActivityOpenConfig::_internal_set_opensvrtimelimit(uint32_t value) {
  
  opensvrtimelimit_ = value;
}
inline void ActivityOpenConfig::set_opensvrtimelimit(uint32_t value) {
  _internal_set_opensvrtimelimit(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.OpenSvrTimeLimit)
}

// uint32 DelayTime = 13;
inline void ActivityOpenConfig::clear_delaytime() {
  delaytime_ = 0u;
}
inline uint32_t ActivityOpenConfig::_internal_delaytime() const {
  return delaytime_;
}
inline uint32_t ActivityOpenConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.DelayTime)
  return _internal_delaytime();
}
inline void ActivityOpenConfig::_internal_set_delaytime(uint32_t value) {
  
  delaytime_ = value;
}
inline void ActivityOpenConfig::set_delaytime(uint32_t value) {
  _internal_set_delaytime(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.DelayTime)
}

// int32 IsNeedSelectSubID = 14;
inline void ActivityOpenConfig::clear_isneedselectsubid() {
  isneedselectsubid_ = 0;
}
inline int32_t ActivityOpenConfig::_internal_isneedselectsubid() const {
  return isneedselectsubid_;
}
inline int32_t ActivityOpenConfig::isneedselectsubid() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.IsNeedSelectSubID)
  return _internal_isneedselectsubid();
}
inline void ActivityOpenConfig::_internal_set_isneedselectsubid(int32_t value) {
  
  isneedselectsubid_ = value;
}
inline void ActivityOpenConfig::set_isneedselectsubid(int32_t value) {
  _internal_set_isneedselectsubid(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.IsNeedSelectSubID)
}

// int32 ActOpenLaterSvrOpenLimit = 15;
inline void ActivityOpenConfig::clear_actopenlatersvropenlimit() {
  actopenlatersvropenlimit_ = 0;
}
inline int32_t ActivityOpenConfig::_internal_actopenlatersvropenlimit() const {
  return actopenlatersvropenlimit_;
}
inline int32_t ActivityOpenConfig::actopenlatersvropenlimit() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.ActOpenLaterSvrOpenLimit)
  return _internal_actopenlatersvropenlimit();
}
inline void ActivityOpenConfig::_internal_set_actopenlatersvropenlimit(int32_t value) {
  
  actopenlatersvropenlimit_ = value;
}
inline void ActivityOpenConfig::set_actopenlatersvropenlimit(int32_t value) {
  _internal_set_actopenlatersvropenlimit(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.ActOpenLaterSvrOpenLimit)
}

// int32 IsNeedSelectSvrID = 16;
inline void ActivityOpenConfig::clear_isneedselectsvrid() {
  isneedselectsvrid_ = 0;
}
inline int32_t ActivityOpenConfig::_internal_isneedselectsvrid() const {
  return isneedselectsvrid_;
}
inline int32_t ActivityOpenConfig::isneedselectsvrid() const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfig.IsNeedSelectSvrID)
  return _internal_isneedselectsvrid();
}
inline void ActivityOpenConfig::_internal_set_isneedselectsvrid(int32_t value) {
  
  isneedselectsvrid_ = value;
}
inline void ActivityOpenConfig::set_isneedselectsvrid(int32_t value) {
  _internal_set_isneedselectsvrid(value);
  // @@protoc_insertion_point(field_set:resource.ActivityOpenConfig.IsNeedSelectSvrID)
}

// -------------------------------------------------------------------

// ActivityOpenConfigList

// repeated .resource.ActivityOpenConfig data = 1;
inline int ActivityOpenConfigList::_internal_data_size() const {
  return data_.size();
}
inline int ActivityOpenConfigList::data_size() const {
  return _internal_data_size();
}
inline void ActivityOpenConfigList::clear_data() {
  data_.Clear();
}
inline ::resource::ActivityOpenConfig* ActivityOpenConfigList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:resource.ActivityOpenConfigList.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ActivityOpenConfig >*
ActivityOpenConfigList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:resource.ActivityOpenConfigList.data)
  return &data_;
}
inline const ::resource::ActivityOpenConfig& ActivityOpenConfigList::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::resource::ActivityOpenConfig& ActivityOpenConfigList::data(int index) const {
  // @@protoc_insertion_point(field_get:resource.ActivityOpenConfigList.data)
  return _internal_data(index);
}
inline ::resource::ActivityOpenConfig* ActivityOpenConfigList::_internal_add_data() {
  return data_.Add();
}
inline ::resource::ActivityOpenConfig* ActivityOpenConfigList::add_data() {
  ::resource::ActivityOpenConfig* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:resource.ActivityOpenConfigList.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ActivityOpenConfig >&
ActivityOpenConfigList::data() const {
  // @@protoc_insertion_point(field_list:resource.ActivityOpenConfigList.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resource

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ActivityOpenConfig_2eproto

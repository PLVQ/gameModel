// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SealConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SealConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SealConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SealConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SealConfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SealConfig_2eproto;
namespace resource {
class AttrConfig;
struct AttrConfigDefaultTypeInternal;
extern AttrConfigDefaultTypeInternal _AttrConfig_default_instance_;
class SealConfig;
struct SealConfigDefaultTypeInternal;
extern SealConfigDefaultTypeInternal _SealConfig_default_instance_;
class SealConfigList;
struct SealConfigListDefaultTypeInternal;
extern SealConfigListDefaultTypeInternal _SealConfigList_default_instance_;
}  // namespace resource
PROTOBUF_NAMESPACE_OPEN
template<> ::resource::AttrConfig* Arena::CreateMaybeMessage<::resource::AttrConfig>(Arena*);
template<> ::resource::SealConfig* Arena::CreateMaybeMessage<::resource::SealConfig>(Arena*);
template<> ::resource::SealConfigList* Arena::CreateMaybeMessage<::resource::SealConfigList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace resource {

// ===================================================================

class SealConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.SealConfig) */ {
 public:
  inline SealConfig() : SealConfig(nullptr) {}
  ~SealConfig() override;
  explicit constexpr SealConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SealConfig(const SealConfig& from);
  SealConfig(SealConfig&& from) noexcept
    : SealConfig() {
    *this = ::std::move(from);
  }

  inline SealConfig& operator=(const SealConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SealConfig& operator=(SealConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SealConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SealConfig* internal_default_instance() {
    return reinterpret_cast<const SealConfig*>(
               &_SealConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SealConfig& a, SealConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SealConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SealConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SealConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SealConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SealConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SealConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SealConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.SealConfig";
  }
  protected:
  explicit SealConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSealAttrFieldNumber = 3,
    kSealNameFieldNumber = 2,
    kSealIDFieldNumber = 1,
  };
  // repeated .resource.AttrConfig SealAttr = 3;
  int sealattr_size() const;
  private:
  int _internal_sealattr_size() const;
  public:
  void clear_sealattr();
  ::resource::AttrConfig* mutable_sealattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::AttrConfig >*
      mutable_sealattr();
  private:
  const ::resource::AttrConfig& _internal_sealattr(int index) const;
  ::resource::AttrConfig* _internal_add_sealattr();
  public:
  const ::resource::AttrConfig& sealattr(int index) const;
  ::resource::AttrConfig* add_sealattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::AttrConfig >&
      sealattr() const;

  // string SealName = 2;
  void clear_sealname();
  const std::string& sealname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sealname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sealname();
  PROTOBUF_NODISCARD std::string* release_sealname();
  void set_allocated_sealname(std::string* sealname);
  private:
  const std::string& _internal_sealname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sealname(const std::string& value);
  std::string* _internal_mutable_sealname();
  public:

  // int32 SealID = 1;
  void clear_sealid();
  int32_t sealid() const;
  void set_sealid(int32_t value);
  private:
  int32_t _internal_sealid() const;
  void _internal_set_sealid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:resource.SealConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::AttrConfig > sealattr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sealname_;
  int32_t sealid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SealConfig_2eproto;
};
// -------------------------------------------------------------------

class AttrConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AttrConfig) */ {
 public:
  inline AttrConfig() : AttrConfig(nullptr) {}
  ~AttrConfig() override;
  explicit constexpr AttrConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttrConfig(const AttrConfig& from);
  AttrConfig(AttrConfig&& from) noexcept
    : AttrConfig() {
    *this = ::std::move(from);
  }

  inline AttrConfig& operator=(const AttrConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrConfig& operator=(AttrConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttrConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttrConfig* internal_default_instance() {
    return reinterpret_cast<const AttrConfig*>(
               &_AttrConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AttrConfig& a, AttrConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttrConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttrConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttrConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AttrConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttrConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AttrConfig";
  }
  protected:
  explicit AttrConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataTypeFieldNumber = 1,
    kAddTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // int32 DataType = 1;
  void clear_datatype();
  int32_t datatype() const;
  void set_datatype(int32_t value);
  private:
  int32_t _internal_datatype() const;
  void _internal_set_datatype(int32_t value);
  public:

  // int32 AddType = 2;
  void clear_addtype();
  int32_t addtype() const;
  void set_addtype(int32_t value);
  private:
  int32_t _internal_addtype() const;
  void _internal_set_addtype(int32_t value);
  public:

  // int32 Value = 3;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:resource.AttrConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t datatype_;
  int32_t addtype_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SealConfig_2eproto;
};
// -------------------------------------------------------------------

class SealConfigList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.SealConfigList) */ {
 public:
  inline SealConfigList() : SealConfigList(nullptr) {}
  ~SealConfigList() override;
  explicit constexpr SealConfigList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SealConfigList(const SealConfigList& from);
  SealConfigList(SealConfigList&& from) noexcept
    : SealConfigList() {
    *this = ::std::move(from);
  }

  inline SealConfigList& operator=(const SealConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SealConfigList& operator=(SealConfigList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SealConfigList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SealConfigList* internal_default_instance() {
    return reinterpret_cast<const SealConfigList*>(
               &_SealConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SealConfigList& a, SealConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(SealConfigList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SealConfigList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SealConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SealConfigList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SealConfigList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SealConfigList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SealConfigList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.SealConfigList";
  }
  protected:
  explicit SealConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .resource.SealConfig data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::resource::SealConfig* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::SealConfig >*
      mutable_data();
  private:
  const ::resource::SealConfig& _internal_data(int index) const;
  ::resource::SealConfig* _internal_add_data();
  public:
  const ::resource::SealConfig& data(int index) const;
  ::resource::SealConfig* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::SealConfig >&
      data() const;

  // @@protoc_insertion_point(class_scope:resource.SealConfigList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::SealConfig > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SealConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SealConfig

// int32 SealID = 1;
inline void SealConfig::clear_sealid() {
  sealid_ = 0;
}
inline int32_t SealConfig::_internal_sealid() const {
  return sealid_;
}
inline int32_t SealConfig::sealid() const {
  // @@protoc_insertion_point(field_get:resource.SealConfig.SealID)
  return _internal_sealid();
}
inline void SealConfig::_internal_set_sealid(int32_t value) {
  
  sealid_ = value;
}
inline void SealConfig::set_sealid(int32_t value) {
  _internal_set_sealid(value);
  // @@protoc_insertion_point(field_set:resource.SealConfig.SealID)
}

// string SealName = 2;
inline void SealConfig::clear_sealname() {
  sealname_.ClearToEmpty();
}
inline const std::string& SealConfig::sealname() const {
  // @@protoc_insertion_point(field_get:resource.SealConfig.SealName)
  return _internal_sealname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SealConfig::set_sealname(ArgT0&& arg0, ArgT... args) {
 
 sealname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:resource.SealConfig.SealName)
}
inline std::string* SealConfig::mutable_sealname() {
  std::string* _s = _internal_mutable_sealname();
  // @@protoc_insertion_point(field_mutable:resource.SealConfig.SealName)
  return _s;
}
inline const std::string& SealConfig::_internal_sealname() const {
  return sealname_.Get();
}
inline void SealConfig::_internal_set_sealname(const std::string& value) {
  
  sealname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SealConfig::_internal_mutable_sealname() {
  
  return sealname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SealConfig::release_sealname() {
  // @@protoc_insertion_point(field_release:resource.SealConfig.SealName)
  return sealname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SealConfig::set_allocated_sealname(std::string* sealname) {
  if (sealname != nullptr) {
    
  } else {
    
  }
  sealname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sealname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sealname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sealname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:resource.SealConfig.SealName)
}

// repeated .resource.AttrConfig SealAttr = 3;
inline int SealConfig::_internal_sealattr_size() const {
  return sealattr_.size();
}
inline int SealConfig::sealattr_size() const {
  return _internal_sealattr_size();
}
inline void SealConfig::clear_sealattr() {
  sealattr_.Clear();
}
inline ::resource::AttrConfig* SealConfig::mutable_sealattr(int index) {
  // @@protoc_insertion_point(field_mutable:resource.SealConfig.SealAttr)
  return sealattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::AttrConfig >*
SealConfig::mutable_sealattr() {
  // @@protoc_insertion_point(field_mutable_list:resource.SealConfig.SealAttr)
  return &sealattr_;
}
inline const ::resource::AttrConfig& SealConfig::_internal_sealattr(int index) const {
  return sealattr_.Get(index);
}
inline const ::resource::AttrConfig& SealConfig::sealattr(int index) const {
  // @@protoc_insertion_point(field_get:resource.SealConfig.SealAttr)
  return _internal_sealattr(index);
}
inline ::resource::AttrConfig* SealConfig::_internal_add_sealattr() {
  return sealattr_.Add();
}
inline ::resource::AttrConfig* SealConfig::add_sealattr() {
  ::resource::AttrConfig* _add = _internal_add_sealattr();
  // @@protoc_insertion_point(field_add:resource.SealConfig.SealAttr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::AttrConfig >&
SealConfig::sealattr() const {
  // @@protoc_insertion_point(field_list:resource.SealConfig.SealAttr)
  return sealattr_;
}

// -------------------------------------------------------------------

// AttrConfig

// int32 DataType = 1;
inline void AttrConfig::clear_datatype() {
  datatype_ = 0;
}
inline int32_t AttrConfig::_internal_datatype() const {
  return datatype_;
}
inline int32_t AttrConfig::datatype() const {
  // @@protoc_insertion_point(field_get:resource.AttrConfig.DataType)
  return _internal_datatype();
}
inline void AttrConfig::_internal_set_datatype(int32_t value) {
  
  datatype_ = value;
}
inline void AttrConfig::set_datatype(int32_t value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:resource.AttrConfig.DataType)
}

// int32 AddType = 2;
inline void AttrConfig::clear_addtype() {
  addtype_ = 0;
}
inline int32_t AttrConfig::_internal_addtype() const {
  return addtype_;
}
inline int32_t AttrConfig::addtype() const {
  // @@protoc_insertion_point(field_get:resource.AttrConfig.AddType)
  return _internal_addtype();
}
inline void AttrConfig::_internal_set_addtype(int32_t value) {
  
  addtype_ = value;
}
inline void AttrConfig::set_addtype(int32_t value) {
  _internal_set_addtype(value);
  // @@protoc_insertion_point(field_set:resource.AttrConfig.AddType)
}

// int32 Value = 3;
inline void AttrConfig::clear_value() {
  value_ = 0;
}
inline int32_t AttrConfig::_internal_value() const {
  return value_;
}
inline int32_t AttrConfig::value() const {
  // @@protoc_insertion_point(field_get:resource.AttrConfig.Value)
  return _internal_value();
}
inline void AttrConfig::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void AttrConfig::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:resource.AttrConfig.Value)
}

// -------------------------------------------------------------------

// SealConfigList

// repeated .resource.SealConfig data = 1;
inline int SealConfigList::_internal_data_size() const {
  return data_.size();
}
inline int SealConfigList::data_size() const {
  return _internal_data_size();
}
inline void SealConfigList::clear_data() {
  data_.Clear();
}
inline ::resource::SealConfig* SealConfigList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:resource.SealConfigList.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::SealConfig >*
SealConfigList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:resource.SealConfigList.data)
  return &data_;
}
inline const ::resource::SealConfig& SealConfigList::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::resource::SealConfig& SealConfigList::data(int index) const {
  // @@protoc_insertion_point(field_get:resource.SealConfigList.data)
  return _internal_data(index);
}
inline ::resource::SealConfig* SealConfigList::_internal_add_data() {
  return data_.Add();
}
inline ::resource::SealConfig* SealConfigList::add_data() {
  ::resource::SealConfig* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:resource.SealConfigList.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::SealConfig >&
SealConfigList::data() const {
  // @@protoc_insertion_point(field_list:resource.SealConfigList.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resource

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SealConfig_2eproto

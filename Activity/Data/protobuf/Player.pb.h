// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Player.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Player_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Player_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Player_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Player_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Player_2eproto;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Player* Arena::CreateMaybeMessage<::Player>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 6,
    kRoleNOFieldNumber = 1,
    kUinFieldNumber = 2,
    kRoleIDFieldNumber = 3,
    kChannelNameFieldNumber = 4,
    kRoleInitFieldNumber = 5,
    kHeadFieldNumber = 7,
    kSexFieldNumber = 8,
    kBodyTypeFieldNumber = 9,
    kLevelFieldNumber = 10,
    kExpFieldNumber = 11,
    kDiamondFieldNumber = 12,
    kGoldFieldNumber = 13,
    kFightValFieldNumber = 14,
    kCreateTimeFieldNumber = 15,
    kLastLoginTimeFieldNumber = 16,
    kLastLogoutTimeFieldNumber = 17,
    kLastSaveDBTimeFieldNumber = 18,
    kTotalRMBFieldNumber = 19,
  };
  // string Name = 6;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 RoleNO = 1;
  void clear_roleno();
  uint64_t roleno() const;
  void set_roleno(uint64_t value);
  private:
  uint64_t _internal_roleno() const;
  void _internal_set_roleno(uint64_t value);
  public:

  // uint64 Uin = 2;
  void clear_uin();
  uint64_t uin() const;
  void set_uin(uint64_t value);
  private:
  uint64_t _internal_uin() const;
  void _internal_set_uin(uint64_t value);
  public:

  // uint64 RoleID = 3;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // int32 ChannelName = 4;
  void clear_channelname();
  int32_t channelname() const;
  void set_channelname(int32_t value);
  private:
  int32_t _internal_channelname() const;
  void _internal_set_channelname(int32_t value);
  public:

  // int32 RoleInit = 5;
  void clear_roleinit();
  int32_t roleinit() const;
  void set_roleinit(int32_t value);
  private:
  int32_t _internal_roleinit() const;
  void _internal_set_roleinit(int32_t value);
  public:

  // uint32 Head = 7;
  void clear_head();
  uint32_t head() const;
  void set_head(uint32_t value);
  private:
  uint32_t _internal_head() const;
  void _internal_set_head(uint32_t value);
  public:

  // int32 Sex = 8;
  void clear_sex();
  int32_t sex() const;
  void set_sex(int32_t value);
  private:
  int32_t _internal_sex() const;
  void _internal_set_sex(int32_t value);
  public:

  // int32 BodyType = 9;
  void clear_bodytype();
  int32_t bodytype() const;
  void set_bodytype(int32_t value);
  private:
  int32_t _internal_bodytype() const;
  void _internal_set_bodytype(int32_t value);
  public:

  // uint32 Level = 10;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint64 Exp = 11;
  void clear_exp();
  uint64_t exp() const;
  void set_exp(uint64_t value);
  private:
  uint64_t _internal_exp() const;
  void _internal_set_exp(uint64_t value);
  public:

  // uint64 Diamond = 12;
  void clear_diamond();
  uint64_t diamond() const;
  void set_diamond(uint64_t value);
  private:
  uint64_t _internal_diamond() const;
  void _internal_set_diamond(uint64_t value);
  public:

  // uint64 Gold = 13;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // uint64 FightVal = 14;
  void clear_fightval();
  uint64_t fightval() const;
  void set_fightval(uint64_t value);
  private:
  uint64_t _internal_fightval() const;
  void _internal_set_fightval(uint64_t value);
  public:

  // uint64 CreateTime = 15;
  void clear_createtime();
  uint64_t createtime() const;
  void set_createtime(uint64_t value);
  private:
  uint64_t _internal_createtime() const;
  void _internal_set_createtime(uint64_t value);
  public:

  // uint64 LastLoginTime = 16;
  void clear_lastlogintime();
  uint64_t lastlogintime() const;
  void set_lastlogintime(uint64_t value);
  private:
  uint64_t _internal_lastlogintime() const;
  void _internal_set_lastlogintime(uint64_t value);
  public:

  // uint64 LastLogoutTime = 17;
  void clear_lastlogouttime();
  uint64_t lastlogouttime() const;
  void set_lastlogouttime(uint64_t value);
  private:
  uint64_t _internal_lastlogouttime() const;
  void _internal_set_lastlogouttime(uint64_t value);
  public:

  // uint64 LastSaveDBTime = 18;
  void clear_lastsavedbtime();
  uint64_t lastsavedbtime() const;
  void set_lastsavedbtime(uint64_t value);
  private:
  uint64_t _internal_lastsavedbtime() const;
  void _internal_set_lastsavedbtime(uint64_t value);
  public:

  // uint64 TotalRMB = 19;
  void clear_totalrmb();
  uint64_t totalrmb() const;
  void set_totalrmb(uint64_t value);
  private:
  uint64_t _internal_totalrmb() const;
  void _internal_set_totalrmb(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t roleno_;
  uint64_t uin_;
  uint64_t roleid_;
  int32_t channelname_;
  int32_t roleinit_;
  uint32_t head_;
  int32_t sex_;
  int32_t bodytype_;
  uint32_t level_;
  uint64_t exp_;
  uint64_t diamond_;
  uint64_t gold_;
  uint64_t fightval_;
  uint64_t createtime_;
  uint64_t lastlogintime_;
  uint64_t lastlogouttime_;
  uint64_t lastsavedbtime_;
  uint64_t totalrmb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Player_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// uint64 RoleNO = 1;
inline void Player::clear_roleno() {
  roleno_ = uint64_t{0u};
}
inline uint64_t Player::_internal_roleno() const {
  return roleno_;
}
inline uint64_t Player::roleno() const {
  // @@protoc_insertion_point(field_get:Player.RoleNO)
  return _internal_roleno();
}
inline void Player::_internal_set_roleno(uint64_t value) {
  
  roleno_ = value;
}
inline void Player::set_roleno(uint64_t value) {
  _internal_set_roleno(value);
  // @@protoc_insertion_point(field_set:Player.RoleNO)
}

// uint64 Uin = 2;
inline void Player::clear_uin() {
  uin_ = uint64_t{0u};
}
inline uint64_t Player::_internal_uin() const {
  return uin_;
}
inline uint64_t Player::uin() const {
  // @@protoc_insertion_point(field_get:Player.Uin)
  return _internal_uin();
}
inline void Player::_internal_set_uin(uint64_t value) {
  
  uin_ = value;
}
inline void Player::set_uin(uint64_t value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:Player.Uin)
}

// uint64 RoleID = 3;
inline void Player::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t Player::_internal_roleid() const {
  return roleid_;
}
inline uint64_t Player::roleid() const {
  // @@protoc_insertion_point(field_get:Player.RoleID)
  return _internal_roleid();
}
inline void Player::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void Player::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:Player.RoleID)
}

// int32 ChannelName = 4;
inline void Player::clear_channelname() {
  channelname_ = 0;
}
inline int32_t Player::_internal_channelname() const {
  return channelname_;
}
inline int32_t Player::channelname() const {
  // @@protoc_insertion_point(field_get:Player.ChannelName)
  return _internal_channelname();
}
inline void Player::_internal_set_channelname(int32_t value) {
  
  channelname_ = value;
}
inline void Player::set_channelname(int32_t value) {
  _internal_set_channelname(value);
  // @@protoc_insertion_point(field_set:Player.ChannelName)
}

// int32 RoleInit = 5;
inline void Player::clear_roleinit() {
  roleinit_ = 0;
}
inline int32_t Player::_internal_roleinit() const {
  return roleinit_;
}
inline int32_t Player::roleinit() const {
  // @@protoc_insertion_point(field_get:Player.RoleInit)
  return _internal_roleinit();
}
inline void Player::_internal_set_roleinit(int32_t value) {
  
  roleinit_ = value;
}
inline void Player::set_roleinit(int32_t value) {
  _internal_set_roleinit(value);
  // @@protoc_insertion_point(field_set:Player.RoleInit)
}

// string Name = 6;
inline void Player::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:Player.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Player.Name)
}
inline std::string* Player::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Player.Name)
  return _s;
}
inline const std::string& Player::_internal_name() const {
  return name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:Player.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Player.Name)
}

// uint32 Head = 7;
inline void Player::clear_head() {
  head_ = 0u;
}
inline uint32_t Player::_internal_head() const {
  return head_;
}
inline uint32_t Player::head() const {
  // @@protoc_insertion_point(field_get:Player.Head)
  return _internal_head();
}
inline void Player::_internal_set_head(uint32_t value) {
  
  head_ = value;
}
inline void Player::set_head(uint32_t value) {
  _internal_set_head(value);
  // @@protoc_insertion_point(field_set:Player.Head)
}

// int32 Sex = 8;
inline void Player::clear_sex() {
  sex_ = 0;
}
inline int32_t Player::_internal_sex() const {
  return sex_;
}
inline int32_t Player::sex() const {
  // @@protoc_insertion_point(field_get:Player.Sex)
  return _internal_sex();
}
inline void Player::_internal_set_sex(int32_t value) {
  
  sex_ = value;
}
inline void Player::set_sex(int32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:Player.Sex)
}

// int32 BodyType = 9;
inline void Player::clear_bodytype() {
  bodytype_ = 0;
}
inline int32_t Player::_internal_bodytype() const {
  return bodytype_;
}
inline int32_t Player::bodytype() const {
  // @@protoc_insertion_point(field_get:Player.BodyType)
  return _internal_bodytype();
}
inline void Player::_internal_set_bodytype(int32_t value) {
  
  bodytype_ = value;
}
inline void Player::set_bodytype(int32_t value) {
  _internal_set_bodytype(value);
  // @@protoc_insertion_point(field_set:Player.BodyType)
}

// uint32 Level = 10;
inline void Player::clear_level() {
  level_ = 0u;
}
inline uint32_t Player::_internal_level() const {
  return level_;
}
inline uint32_t Player::level() const {
  // @@protoc_insertion_point(field_get:Player.Level)
  return _internal_level();
}
inline void Player::_internal_set_level(uint32_t value) {
  
  level_ = value;
}
inline void Player::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Player.Level)
}

// uint64 Exp = 11;
inline void Player::clear_exp() {
  exp_ = uint64_t{0u};
}
inline uint64_t Player::_internal_exp() const {
  return exp_;
}
inline uint64_t Player::exp() const {
  // @@protoc_insertion_point(field_get:Player.Exp)
  return _internal_exp();
}
inline void Player::_internal_set_exp(uint64_t value) {
  
  exp_ = value;
}
inline void Player::set_exp(uint64_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:Player.Exp)
}

// uint64 Diamond = 12;
inline void Player::clear_diamond() {
  diamond_ = uint64_t{0u};
}
inline uint64_t Player::_internal_diamond() const {
  return diamond_;
}
inline uint64_t Player::diamond() const {
  // @@protoc_insertion_point(field_get:Player.Diamond)
  return _internal_diamond();
}
inline void Player::_internal_set_diamond(uint64_t value) {
  
  diamond_ = value;
}
inline void Player::set_diamond(uint64_t value) {
  _internal_set_diamond(value);
  // @@protoc_insertion_point(field_set:Player.Diamond)
}

// uint64 Gold = 13;
inline void Player::clear_gold() {
  gold_ = uint64_t{0u};
}
inline uint64_t Player::_internal_gold() const {
  return gold_;
}
inline uint64_t Player::gold() const {
  // @@protoc_insertion_point(field_get:Player.Gold)
  return _internal_gold();
}
inline void Player::_internal_set_gold(uint64_t value) {
  
  gold_ = value;
}
inline void Player::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:Player.Gold)
}

// uint64 FightVal = 14;
inline void Player::clear_fightval() {
  fightval_ = uint64_t{0u};
}
inline uint64_t Player::_internal_fightval() const {
  return fightval_;
}
inline uint64_t Player::fightval() const {
  // @@protoc_insertion_point(field_get:Player.FightVal)
  return _internal_fightval();
}
inline void Player::_internal_set_fightval(uint64_t value) {
  
  fightval_ = value;
}
inline void Player::set_fightval(uint64_t value) {
  _internal_set_fightval(value);
  // @@protoc_insertion_point(field_set:Player.FightVal)
}

// uint64 CreateTime = 15;
inline void Player::clear_createtime() {
  createtime_ = uint64_t{0u};
}
inline uint64_t Player::_internal_createtime() const {
  return createtime_;
}
inline uint64_t Player::createtime() const {
  // @@protoc_insertion_point(field_get:Player.CreateTime)
  return _internal_createtime();
}
inline void Player::_internal_set_createtime(uint64_t value) {
  
  createtime_ = value;
}
inline void Player::set_createtime(uint64_t value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:Player.CreateTime)
}

// uint64 LastLoginTime = 16;
inline void Player::clear_lastlogintime() {
  lastlogintime_ = uint64_t{0u};
}
inline uint64_t Player::_internal_lastlogintime() const {
  return lastlogintime_;
}
inline uint64_t Player::lastlogintime() const {
  // @@protoc_insertion_point(field_get:Player.LastLoginTime)
  return _internal_lastlogintime();
}
inline void Player::_internal_set_lastlogintime(uint64_t value) {
  
  lastlogintime_ = value;
}
inline void Player::set_lastlogintime(uint64_t value) {
  _internal_set_lastlogintime(value);
  // @@protoc_insertion_point(field_set:Player.LastLoginTime)
}

// uint64 LastLogoutTime = 17;
inline void Player::clear_lastlogouttime() {
  lastlogouttime_ = uint64_t{0u};
}
inline uint64_t Player::_internal_lastlogouttime() const {
  return lastlogouttime_;
}
inline uint64_t Player::lastlogouttime() const {
  // @@protoc_insertion_point(field_get:Player.LastLogoutTime)
  return _internal_lastlogouttime();
}
inline void Player::_internal_set_lastlogouttime(uint64_t value) {
  
  lastlogouttime_ = value;
}
inline void Player::set_lastlogouttime(uint64_t value) {
  _internal_set_lastlogouttime(value);
  // @@protoc_insertion_point(field_set:Player.LastLogoutTime)
}

// uint64 LastSaveDBTime = 18;
inline void Player::clear_lastsavedbtime() {
  lastsavedbtime_ = uint64_t{0u};
}
inline uint64_t Player::_internal_lastsavedbtime() const {
  return lastsavedbtime_;
}
inline uint64_t Player::lastsavedbtime() const {
  // @@protoc_insertion_point(field_get:Player.LastSaveDBTime)
  return _internal_lastsavedbtime();
}
inline void Player::_internal_set_lastsavedbtime(uint64_t value) {
  
  lastsavedbtime_ = value;
}
inline void Player::set_lastsavedbtime(uint64_t value) {
  _internal_set_lastsavedbtime(value);
  // @@protoc_insertion_point(field_set:Player.LastSaveDBTime)
}

// uint64 TotalRMB = 19;
inline void Player::clear_totalrmb() {
  totalrmb_ = uint64_t{0u};
}
inline uint64_t Player::_internal_totalrmb() const {
  return totalrmb_;
}
inline uint64_t Player::totalrmb() const {
  // @@protoc_insertion_point(field_get:Player.TotalRMB)
  return _internal_totalrmb();
}
inline void Player::_internal_set_totalrmb(uint64_t value) {
  
  totalrmb_ = value;
}
inline void Player::set_totalrmb(uint64_t value) {
  _internal_set_totalrmb(value);
  // @@protoc_insertion_point(field_set:Player.TotalRMB)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Player_2eproto
